import telebot
import random
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import os
from yadisk import YaDisk

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
ya_disk_token = ''
ya_disk_photo_folder = "/–§–æ—Ç–æ"  # –ü–∞–ø–∫–∞ —Å —Ñ–æ—Ç–æ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
yadisk = YaDisk(token=ya_disk_token)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
telegram_bot_token = ''
bot = telebot.TeleBot(telegram_bot_token)

# –°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
random_messages = [
    "–ö–ê–ö–ê",
    "–ú–ê–ú–ê",
    "–ü–ê–ü–ê",
    "–ë–ê–ë–ê",
    "–î–Ø–î–Ø",
    "–ú—è—É –ú—è—É",
    "–ì–∞–≤-–ì–∞–≤",
    "–ì—ã—Ç—å –≥—ã—Ç—å –≥—ã—Ç—å",
    "–ì—É–Ω—å –≥—É–Ω—å –≥—É–Ω—å",
    "–Ø –ª—é–±–ª—é –≤–∞—Å, –±–∞–±—É—à–∫–∏!",
]

random_messages2 = [
    "–ö–ê–ö–£",
    "–ú–ê–ú–£",
    "–ü–ê–ü–£",
    "–ë–ê–ë–£",
    "–î–Ø–î–Æ",
    "–ö–ò–°–£",
    "–•–ê–ù–ò",
    "–°–£–ü–¨",
    "–ö–ê–®–ö–£",
    "–û–†–ê–¢–¨",
    "–•–£–õ–ò–ì–ê–ù–ò–¢–¨",
    "–ë–Ø–ö–£",
    "–ü–£–ö–ê–¢–¨",
    "–ö–ê–ú–£",
    "–≥—ã—Ç—å –≥—ã—Ç—å –≥—ã—Ç—å",
    "–≥—É–Ω—å –≥—É–Ω—å –≥—É–Ω—å",
    "–°–£–ü–¨",
]

def create_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    item1 = KeyboardButton('üë∂–°–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!')
    item2 = KeyboardButton('üíó–ú–æ—Ç—è –ª—é–±–∏—Ç...')
    item3 = KeyboardButton('üîÆ–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ú–æ—Ç–∏')
    item4 = KeyboardButton('üñºÔ∏è–§–æ—Ç–æ –ú–æ—Ç–∏')
    item5 = KeyboardButton('‚ùì–ü–æ–º–æ—â—å')
    markup.add(item1, item2, item3, item4, item5)
    return markup

def predict_child_behavior():
    predictions = [
        "–°–µ–≥–æ–¥–Ω—è –ú–æ—Ç—è –±—É–¥–µ—Ç —Å–ø–æ–∫–æ–π–Ω—ã–º –∏ –ø–æ—Å–ª—É—à–Ω—ã–º.",
        "–û–∂–∏–¥–∞–µ–º –æ—Ç –ú–∞—Ç–≤–µ—è –ò–ª—å—è—Å–æ–≤–∏—á–∞ –Ω–µ–±–æ–ª—å—à–∏—Ö –∫–∞–ø—Ä–∏–∑–æ–≤, –Ω–æ –≤ —Ü–µ–ª–æ–º –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ.",
        "–ë—É–¥—É—Ç –∏—Å–ø—ã—Ç–∞–Ω–∏—è - –ú–æ—Ç—è –±—É–¥–µ—Ç –æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–º!",
        "–ú–æ—Ç—è –ø—Ä–æ—è–≤–∏—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—É—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å.",
        "–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ '–ø–æ—á–µ–º—É?'.",
        "–ú–æ—Ç—è –±—É–¥–µ—Ç –Ω–µ–º–Ω–æ–≥–æ —É–ø—Ä—è–º—ã–º, –Ω–æ —ç—Ç–æ –ø—Ä–æ–π–¥–µ—Ç.",
        "–û–∂–∏–¥–∞–µ–º —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –±–µ—Å–ø–æ—Ä—è–¥–∫–∞ - –ú–æ—Ç—è –±—É–¥–µ—Ç —á–µ–º-—Ç–æ —É–≤–ª–µ—á–µ–Ω.",
        "–ú–æ—Ç—è –±—É–¥–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ –ª–∞—Å–∫–æ–≤—ã–º –∏ –Ω–µ–∂–Ω—ã–º.",
        "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–º—Å—è –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º –ø–æ—Å—Ç—É–ø–∫–∞–º - —Å –ú–æ—Ç–µ–π —Å–∫—É—á–Ω–æ –Ω–µ –±—É–¥–µ—Ç!",
        "–ú–æ—Ç—è –±—É–¥–µ—Ç –º–Ω–æ–≥–æ —Å–º–µ—è—Ç—å—Å—è –∏ —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –º–µ–ª–æ—á–∞–º.",
        "–°–µ–≥–æ–¥–Ω—è –≤–æ–∑–º–æ–∂–Ω—ã –∏—Å—Ç–µ—Ä–∏–∫–∏ - –∑–∞–ø–∞—Å–∞–µ–º—Å—è —Ç–µ—Ä–ø–µ–Ω–∏–µ–º.",
        "–ú–æ—Ç—è –±—É–¥–µ—Ç —Å–æ–Ω–ª–∏–≤—ã–º –∏ –≤—è–ª—ã–º –≤–µ—Å—å –¥–µ–Ω—å.",
        "–û–∂–∏–¥–∞–µ–º –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º!",
        "–°–µ–≥–æ–¥–Ω—è –ú–æ—Ç—è –∑–∞—Ö–æ—á–µ—Ç –¥–µ–ª–∞—Ç—å –≤—Å—ë —Å–∞–º - –±—É–¥–µ–º –≥–æ—Ç–æ–≤—ã –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.",
        "–ú–æ—Ç—è –±—É–¥–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –º–∏—Ä–µ –≤–æ–∫—Ä—É–≥.",
        "–ú–æ—Ç—è –±—É–¥–µ—Ç —Ö—É–ª–∏–≥–∞–Ω–∏—Ç—å!."
    ]

    today = datetime.now()
    if 12 <= today.month <= 2:
        predictions.append("–ò–∑-–∑–∞ —Ö–æ–ª–æ–¥–Ω–æ–π –ø–æ–≥–æ–¥—ã –ú–æ—Ç—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ –∫–∞–ø—Ä–∏–∑–Ω—ã–º.")
    elif 6 <= today.month <= 8:
        predictions.append("–ò–∑-–∑–∞ –∂–∞—Ä—ã –ú–æ—Ç—è –±—É–¥–µ—Ç –º–µ–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–º, —á–µ–º –æ–±—ã—á–Ω–æ.")

    if today.weekday() in [5, 6]:
        predictions.append("–ú–æ—Ç—è –±—É–¥–µ—Ç –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è —Ä–∞–Ω—å—à–µ, —á–µ–º –≤ –±—É–¥–Ω–∏ (–∫–∞–∫ –∂–µ —Ç–∞–∫!).")

    prediction = random.choice(predictions)
    accuracy = random.randint(30, 95)
    return f"{prediction}\n\n–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: {accuracy}%"

def get_random_photo_from_disk():
    files = []
    try:
        for item in yadisk.listdir(ya_disk_photo_folder):
            if item.type == "file" and item.mime_type.startswith("image/"):
                files.append(item)
        
        if not files:
            return None
        
        random_photo = random.choice(files)
        temp_file = f"temp_{random_photo.name}"
        yadisk.download(random_photo.path, temp_file)
        return temp_file
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º: {e}")
        return None

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –Ø –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–æ–±–æ—Ç –ú–æ—Ç—è. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π.",
                     reply_markup=create_menu())

@bot.message_handler(func=lambda message: message.text.lower() == 'üë∂—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!')
def send_random_message(message):
    random_message = random.choice(random_messages)
    bot.send_message(message.chat.id, random_message, reply_markup=create_menu())

@bot.message_handler(func=lambda message: message.text.lower() == 'üíó–º–æ—Ç—è –ª—é–±–∏—Ç...')
def send_love_message(message):
    random_message2 = random.choice(random_messages2)
    bot.send_message(message.chat.id, '–ú–æ—Ç—è –ª—é–±–∏—Ç ' + random_message2, reply_markup=create_menu())

@bot.message_handler(func=lambda message: message.text.lower() == 'üîÆ–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –º–æ—Ç–∏')
def send_prediction(message):
    prediction = predict_child_behavior()
    bot.send_message(message.chat.id, prediction, reply_markup=create_menu())

@bot.message_handler(func=lambda message: message.text.lower() == 'üñºÔ∏è—Ñ–æ—Ç–æ –º–æ—Ç–∏')
def send_photo(message):
    try:
        photo_path = get_random_photo_from_disk()
        if photo_path:
            with open(photo_path, 'rb') as photo:
                bot.send_photo(message.chat.id, photo)
            os.remove(photo_path)
        else:
            bot.send_message(message.chat.id, "–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ", reply_markup=create_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {str(e)}", reply_markup=create_menu())

@bot.message_handler(func=lambda message: message.text.lower() == '‚ùì–ø–æ–º–æ—â—å')
def send_help(message):
    bot.send_message(message.chat.id,
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "- –°–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!: –ú–æ—Ç—è —á—Ç–æ-—Ç–æ —Å–∫–∞–∂–µ—Ç!\n"
                    "- –ú–æ—Ç—è –ª—é–±–∏—Ç...: –∞ —á—Ç–æ –∂–µ –ª—é–±–∏—Ç –ú–æ—Ç—è?\n"
                    "- –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ú–æ—Ç–∏: —É–∑–Ω–∞–µ–º, —á–µ–≥–æ –æ–∂–∏–¥–∞—Ç—å –æ—Ç –º–∞–ª—ã—à–∞ —Å–µ–≥–æ–¥–Ω—è\n"
                    "- –§–æ—Ç–æ –ú–æ—Ç–∏: –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –ú–æ—Ç–∏",
                    reply_markup=create_menu())

@bot.message_handler(content_types=["text"])
def echo(message):
    if bot.get_me().username.lower() in message.text.lower():
        bot.reply_to(message, "–ë–∞! –ü—Ä–∏–≤–µ—Ç!", reply_markup=create_menu())
    else:
        bot.send_message(message.chat.id, message.text, reply_markup=create_menu())

if __name__ == '__main__':
    bot.polling(none_stop=True)